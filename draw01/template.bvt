svg{
    //x = 10
    //y = 10
    height=800
    width=800
    // 深度信息图
    // 原始基因片段图
    // 基因方块
    Component{
		@let n = 100
        @let map = @colorMap(5,["#0ac492","#ffff80","#8585e0","#ff6666","#3a91a5"])
     	@let segW = 30 // 方块大小
        @let margin = 20
        @let hoverFun = (d,i)=>{
            hoverArr.value[i] = d
            }
        // @let clickSeg = (i)=>{
        //     segDisplayIndex.value = i
        //     genesStart.value = newSegInfo[i].start
        //     genesEnd.value = newSegInfo[i].end
        //     dragStart.value = newSegInfo[i].start
        //     dragEnd.value = newSegInfo[i].end
        // }
        @let clickGene = (content)=>{
            alertContent.value=content
            showModal.value = true
            }
        @let variantHoverFun = (d,i)=>{
            variantHover.value[i] = d
        }
        width = segW*segLength
        x = 40
        y = 60
        Rows{
            width = 100%
            // 1.true scale
            Component{
                @let minTextL = (end-start)/(segW*segLength)*0.25*segW
                ref = "trueScale"
                height = segW
                width = 100%
                xScale = @scaleLinear(start,end)
                Component{
                    @let tl = textArr.length
                    @let textMargin = segW*segLength/(tl-1)
                    @for (text, i) in textArr {        
                        Component{
                            Text{
                                y = -25
                                x = textMargin*i-textMargin/2
                                rotation = @rotate(-45)
                                text = text
                            }
                            Line{
                                x1 = textMargin*i
                                y1 = -20
                                x2 = @scaledX(text)
                            }
                        }
                    }
                }
                // }
                @for (seg,i) in newSegInfo{
                    SegBlock{
                        ref = "trueScale"+i
                        x = @scaledX(seg.start)
                        width = @scaledX(seg.length)
                        height = 100%
                        index = i
                        color = map.get(i%5)
                        hoverArr = hoverArr.value
                        hoverFun = hoverFun
                        clickSeg = clickSeg
                        data = seg
                    }
                    @if(seg.length>minTextL){
                        Text.centered{text=i+1;x=(@scaledX(seg.start)+@scaledX(seg.end))/2;y=50%}
                    }
                    // left line
                    Line{
                        x1 = @scaledX(seg.start);x2 = i*segW;y1=segW;y2 = segW+margin/2;
                    }
                    Line{
                        x1 = i*segW;x2 = i*segW;y1=segW+margin/2;y2 = 3*segW+margin*2;
                    }
                    // right line
                    Line{
                        x1 = @scaledX(seg.end);x2 = (i+1)*segW;y1=segW;y2 = segW+margin/2;
                    }
                    Line{
                        x1 = (i+1)*segW;x2 = (i+1)*segW;y1=segW+margin/2;y2 = 3*segW+margin*2;
                    }
                }
            }
            // 2.depth
            Component{
                y = margin*2
                height = 2*segW
                Axis {
                        y = 100%
                        height = -2*segW
                        orientation = "left"
                        yScale = @scaleLinear(0, 70) // **70
                }
                @for (d,i) in depth{
                    XYPlot {
                        x = i*segW
                        valueRange = [0,70] // need be edited
                        index = i
                        height = 100%
                        width = segW
                        @let t1 = {y1:d.points}
                        data = t1
                        stackedData = {stacked: ['y1']}
                        hasPadding = false
                        StackedArea {
                            data = "stacked"
                            :children (data) {
                                Path {
                                    d = data.path
                                    fill = "#e63e8f"
                                }
                            }
                            behavior:tooltip {
                                content = "average-depth:"+d.avg
                            }
                        }
                        Line {
                            behavior:tooltip {
                                content = "average-depth:"+d.avg
                            }
                            y1=@scaledY(d.avg);y2=@scaledY(d.avg);x2 = segW;stroke="blue";strokeWidth = 2
                        }
                    }
                }
            }
            // 3.rescale SEG block
            Component{
                ref = "rescale"
                height = segW
                @for (seg,i) in newSegInfo {
                    // 方块
                    SegBlock{
                        ref = "rescale"+i
                        x = i*segW
                        width = segW
                        height = segW
                        index = i
                        color = map.get(i%5)
                        hoverArr = hoverArr.value
                        hoverFun = hoverFun
                        clickSeg = clickSeg
                        data = seg
                    }
                    // 文字 原子组件内不允许创建子组件
                    Text.centered{text=i+1;x=i*segW+segW/2;y=segW/2;}
                }
            }
            // 4.new gene SEG
            Container{
                ref = "newSeq"
                //detached = true
                y = margin*2
                // height = 200
                @let pointX = 0
                @let pointY = 0
                @let preNum = 0 // previous SEG number
                @let preDirection = '+'
                @let changeDirection = false
                @for (seg,i) in segSequence{  
                    Container{
                        //detached = true
                        @expr changeDirection = preDirection!=seg.direction
                        @if seg.type=="SEG" && preDirection=="+"{
                            @if !changeDirection && seg.num>=preNum+1 {
                                Line{x1=pointX;x2=(seg.num-1)*segW;y1=pointY+segW/2;y2=pointY+segW/2;dashArray = "2,2";}
                                Container{
                                    @let r = (seg.num-1)%5  
                                    // Rect{x=(seg.num-1)*segW;y=pointY;width=segW;height=segW;fill=map.get(r);stroke="black"}
                                    SegBlock{
                                        ref = "newSeq"+seg.num-1
                                        x = (seg.num-1)*segW;
                                        y = pointY
                                        width=segW
                                        height=segW
                                        index = seg.num-1
                                        color = map.get(r)
                                        hoverArr = hoverArr.value
                                        hoverFun = hoverFun
                                        clickSeg = clickSeg
                                        data = newSegInfo[seg.num-1]
                                    }
                                }
                                Text.centered{text=seg.num;x=seg.num*segW-0.5*segW;y=pointY+0.5*segW;
                                }
                                // reset position point and preNum
                                Container{
                                    @expr pointX=seg.num*segW
                                    @expr preNum=seg.num
                                }
                                Container{
                                    x=(preNum-1)*segW;
                                    y=pointY+segW*0.75;
                                    Line{x2=segW*0.8}
                                    Triangle{x=segW*0.75;y=-0.1*segW;width=segW*0.2;height=0.2*segW;orientation="right";fill="black"}
                                }    
                            }
                            @elsif !changeDirection && seg.num<=preNum {
                                Line{x1=pointX;x2=pointX+segW;y1=pointY+segW/2;y2=pointY+segW/2;dashArray = "2,2";}
                                Container{
                                    x=pointX+segW
                                    y=pointY+segW
                                    ArcLine{dashArray = "2,2";r=segW/2;x1=0;x2=180;}   
                                }             
                                Line{x1=pointX+segW;x2=(seg.num-1)*segW;y1=pointY+segW*1.5;y2=pointY+segW*1.5;dashArray = "2,2";}
                                Container{
                                    x=(seg.num-1)*segW
                                    y=pointY+2*segW
                                    ArcLine{dashArray = "2,2";x1=180;x2=360;r=segW/2;}
                                }
                                Container{
                                    @let r = (seg.num-1)%5  
                                    // Rect{x=(seg.num-1)*segW;y=pointY+2*segW;width=segW;height=segW;fill=map.get(r);stroke="black"}
                                    SegBlock{
                                        ref = "newSeq"+seg.num-1
                                        x = (seg.num-1)*segW;
                                        y = pointY+2*segW
                                        width=segW
                                        height=segW
                                        index = seg.num-1
                                        color = map.get(r)
                                        hoverArr = hoverArr.value
                                        hoverFun = hoverFun
                                        clickSeg = clickSeg
                                        data = newSegInfo[seg.num-1]
                                    }
                                }
                                Text.centered{text=seg.num;x=seg.num*segW-0.5*segW;y=pointY+2.5*segW;}
                                Container{
                                    @expr pointX=seg.num*segW
                                    @expr pointY=pointY+2*segW
                                    @expr preNum=seg.num
                                }
                                Container{
                                    x=(preNum-1)*segW;
                                    y=pointY+segW*0.75;
                                    Line{x2=segW*0.8}
                                    Triangle{x=segW*0.75;y=-0.1*segW;width=segW*0.2;height=0.2*segW;orientation="right";fill="black"}
                                }   
                            }
                            @elsif changeDirection && seg.num>=preNum+1 { 
                                Line{x1=pointX;x2=seg.num*segW;y1=pointY+segW/2;y2=pointY+segW/2;dashArray = "2,2";}
                                Container{
                                    x=seg.num*segW
                                    y=pointY+1.5*segW
                                    ArcLine{x1=0;x2=180;r=segW;dashArray = "2,2";}
                                }
                                Container{
                                    @let r = (seg.num-1)%5 
                                    // Rect{x=(seg.num-1)*segW;y=pointY+2*segW;width=segW;height=segW;fill=map.get(r);stroke="black"}
                                    SegBlock{
                                        ref = "newSeq"+seg.num-1
                                        x = (seg.num-1)*segW;
                                        y = pointY+2*segW
                                        width=segW
                                        height=segW
                                        index = seg.num-1
                                        color = map.get(r)
                                        hoverArr = hoverArr.value
                                        hoverFun = hoverFun
                                        clickSeg = clickSeg
                                        data = newSegInfo[seg.num-1]
                                    }
                                }
                                Text.centered{text=seg.num;x=seg.num*segW-0.5*segW;y=pointY+2.5*segW;}
                                Container{
                                    @expr pointX=(seg.num-1)*segW
                                    @expr pointY=pointY+segW*2
                                    @expr preNum=seg.num
                                }
                                Container{
                                    x=pointX;
                                    y=pointY+segW*0.75;
                                    Line{x1=0.2*segW;x2=segW}
                                    Triangle{y=-0.1*segW;width=segW*0.2;height=0.2*segW;orientation="left";fill="black"}
                                }   
                            }
                            @else{
                                Container{
                                    x=pointX;
                                    y=pointY+1.5*segW;
                                    ArcLine{x1=0;x2=180;r=segW;dashArray = "2,2";}
                                }
                                Line{x1=pointX;x2=seg.num*segW;y1=pointY+2.5*segW;y2=y1=pointY+2.5*segW;dashArray = "2,2";}
                                Container{
                                    @let r = (seg.num-1)%5 
                                    // Rect{x=(seg.num-1)*segW;y=pointY+2*segW;width=segW;height=segW;fill=map.get(r);stroke="black"}
                                    SegBlock{
                                        ref = "newSeq"+seg.num-1
                                        x = (seg.num-1)*segW;
                                        y = pointY+2*segW
                                        width=segW
                                        height=segW
                                        index = seg.num-1
                                        color = map.get(r)
                                        hoverArr = hoverArr.value
                                        hoverFun = hoverFun
                                        clickSeg = clickSeg
                                        data = newSegInfo[seg.num-1]
                                    }
                                }
                                Text.centered{text=seg.num;x=seg.num*segW-0.5*segW;y=pointY+2.5*segW;}
                                Container{
                                    @expr pointX=(seg.num-1)*segW
                                    @expr pointY=pointY+2*segW
                                    @expr preNum=seg.num
                                }
                            Container{
                                    x=pointX;
                                    y=pointY+segW*0.75;
                                    Line{x1=0.2*segW;x2=segW}
                                    Triangle{y=-0.1*segW;width=segW*0.2;height=0.2*segW;orientation="left";fill="black"}
                                }   
                            }
                            Container{
                                @expr preDirection=seg.direction
                            }
                        }
                        @elsif seg.type=="SEG" && preDirection=="-"{
                            @if !changeDirection && seg.num<=preNum-1 {
                                Line{x1=pointX;x2=seg.num*segW;y1=pointY+segW/2;y2=pointY+segW/2;dashArray = "2,2";}
                                Container{
                                    @let r = (seg.num-1)%5 
                                    // Rect{x=(seg.num-1)*segW;y=pointY;width=segW;height=segW;fill=map.get(r);stroke="black"}
                                    SegBlock{
                                        ref = "newSeq"+seg.num-1
                                        x = (seg.num-1)*segW;
                                        y = pointY
                                        width=segW
                                        height=segW
                                        index = seg.num-1
                                        color = map.get(r)
                                        hoverArr = hoverArr.value
                                        hoverFun = hoverFun
                                        clickSeg = clickSeg
                                        data = newSegInfo[seg.num-1]
                                    }
                                }
                                Text.centered{text=seg.num;x=seg.num*segW-0.5*segW;y=pointY+0.5*segW;
                                }
                                // reset position point and preNum
                                Container{
                                    @expr pointX=(seg.num-1)*segW
                                    @expr preNum=seg.num
                                }
                                Container{
                                    x=pointX;
                                    y=pointY+segW*0.75;
                                    Line{x1=0.2*segW;x2=segW}
                                    Triangle{y=-0.1*segW;width=segW*0.2;height=0.2*segW;orientation="left";fill="black"}
                                }   
                            }
                            @elsif !changeDirection && seg.num>=preNum {
                                Line{x1=pointX;x2=pointX-segW;y1=pointY+segW/2;y2=pointY+segW/2;dashArray = "2,2";}
                                Container{
                                    x=pointX-segW
                                    y=pointY+segW
                                    ArcLine{dashArray = "2,2";r=segW/2;x1=180;x2=360;}   
                                }             
                                Line{x1=pointX-segW;x2=seg.num*segW;y1=pointY+segW*1.5;y2=pointY+segW*1.5;dashArray = "2,2";}
                                Container{
                                    x=seg.num*segW
                                    y=pointY+2*segW
                                    ArcLine{dashArray = "2,2";x1=0;x2=180;r=segW/2;}
                                }
                                Container{
                                    @let r = (seg.num-1)%5
                                    // Rect{x=(seg.num-1)*segW;y=pointY+2*segW;width=segW;height=segW;fill=map.get(r);stroke="black"}
                                    SegBlock{
                                        ref = "newSeq"+seg.num-1
                                        x = (seg.num-1)*segW;
                                        y = pointY+2*segW
                                        width=segW
                                        height=segW
                                        index = seg.num-1
                                        color = map.get(r)
                                        hoverArr = hoverArr.value
                                        hoverFun = hoverFun
                                        clickSeg = clickSeg
                                        data = newSegInfo[seg.num-1]
                                    }
                                }
                                Text.centered{text=seg.num;x=seg.num*segW-0.5*segW;y=pointY+2.5*segW;}
                                Container{
                                    @expr pointX=seg.num*segW
                                    @expr pointY=pointY+2*segW
                                    @expr preNum=seg.num
                                }
                                Container{
                                    x=pointX;
                                    y=pointY+segW*0.75;
                                    Line{x1=0.2*segW;x2=segW}
                                    Triangle{y=-0.1*segW;width=segW*0.2;height=0.2*segW;orientation="left";fill="black"}
                                }     
                            }
                            @elsif changeDirection && seg.num<=preNum-1 { 
                                Line{x1=pointX;x2=(seg.num-1)*segW;y1=pointY+segW/2;y2=pointY+segW/2;dashArray = "2,2";}
                                Container{
                                    x=(seg.num-1)*segW
                                    y=pointY+1.5*segW
                                    ArcLine{x1=180;x2=360;r=segW;dashArray = "2,2";}
                                }
                                Container{
                                    @let r = (seg.num-1)%5  
                                    // Rect{x=(seg.num-1)*segW;y=pointY+2*segW;width=segW;height=segW;fill=map.get(r);stroke="black"}
                                    SegBlock{
                                        ref = "newSeq"+seg.num-1
                                        x = (seg.num-1)*segW;
                                        y = pointY+2*segW
                                        width=segW
                                        height=segW
                                        index = seg.num-1
                                        color = map.get(r)
                                        hoverArr = hoverArr.value
                                        hoverFun = hoverFun
                                        clickSeg = clickSeg
                                        data = newSegInfo[seg.num-1]
                                    }
                                }
                                Text.centered{text=seg.num;x=seg.num*segW-0.5*segW;y=pointY+2.5*segW;}
                                Container{
                                    @expr pointX=seg.num*segW
                                    @expr pointY=pointY+segW*2
                                    @expr preNum=seg.num
                                }
                                Container{
                                    x=(preNum-1)*segW;
                                    y=pointY+segW*0.75;
                                    Line{x2=segW*0.8}
                                    Triangle{x=segW*0.75;y=-0.1*segW;width=segW*0.2;height=0.2*segW;orientation="right";fill="black"}
                                }   
                            }
                            @else{
                                Container{
                                    x=pointX;
                                    y=pointY+1.5*segW;
                                    ArcLine{x1=180;x2=360;r=segW;dashArray = "2,2";}
                                }
                                Line{x1=pointX;x2=(seg.num-1)*segW;y1=pointY+2.5*segW;y2=y1=pointY+2.5*segW;dashArray = "2,2";}
                                Container{
                                    @let r = (seg.num-1)%5 
                                    // Rect{x=(seg.num-1)*segW;y=pointY+2*segW;width=segW;height=segW;fill=map.get(r);stroke="black"} 
                                    SegBlock{
                                        ref = "newSeq"+seg.num-1
                                        x = (seg.num-1)*segW;
                                        y = pointY+2*segW
                                        width=segW
                                        height=segW
                                        index = seg.num-1
                                        color = map.get(r)
                                        hoverArr = hoverArr.value
                                        hoverFun = hoverFun
                                        clickSeg = clickSeg
                                        data = newSegInfo[seg.num-1]
                                    }
                                }
                                Text.centered{text=seg.num;x=seg.num*segW-0.5*segW;y=pointY+2.5*segW;}
                                Container{
                                    @expr pointX=seg.num*segW
                                    @expr pointY=pointY+2*segW
                                    @expr preNum=seg.num
                                }
                                Container{
                                    x=(preNum-1)*segW;
                                    y=pointY+segW*0.75;
                                    Line{x2=segW*0.8}
                                    Triangle{x=segW*0.75;y=-0.1*segW;width=segW*0.2;height=0.2*segW;orientation="right";fill="black"}
                                }     
                                
                            }
                            Container{
                                @expr preDirection=seg.direction
                            }
                        }
                        // ??基因片方向，基因片有可能同时插入两个吗？现在只保证一次插入一个
                        @else{
                        // 插入基因片，三角标记
                            Triangle {
                                x=pointX-0.5*segW
                                y=pointY-0.25*segW
                                width = segW; height = 0.25*segW;
                                orientation = "bottom"
                            }
                            Text.centered{
                                x=pointX
                                y=pointY-0.5*segW
                                text = "INS"+seg.num
                            }
                        }
                    }
                }
            }
            // 5.bottom gene area
            Component{
                y = margin
                GeneArea{
                    ref = "geneArea"
                    segDisplayIndex = segDisplayIndex.value
                    //genesArr = genesArr
                    //variantsArr = variantsArr
                    genesStart = genesStart.value
                    genesEnd = genesEnd.value
                    variantsData = variantsData.value
                    genesData = genesData.value
                    // start = start.value
                    // end = end.value
                    colorMap = map
                    updateRange = updateRange
                    //alertInfo = alertInfo
                    clickGene = clickGene
                    dragStart = dragStart.value
                    dragEnd = dragEnd.value
                    variantHover = variantHover.value
                    variantHoverFun = variantHoverFun
                    range = range
                    dragGenes = dragGenes.value
                    dragVariants = dragVariants.value
                }
            }
        }
    }
}